//This file is generated by csv_to_struct.py
typedef struct packed {
  bit [35:32] DSTRD; // Doorbell Stride 
  bit [31:24] TO; // Timeout 
  bit [23:19] RSVD0; //
  bit [18:17] AMS; // Arbitration Mechanism Supported 
  bit [16:16] CQR; // Contiguous Queues Required 
  bit [15:00] MQES; // Maximum Queue Entries Supported 
} S_CAP; //nvme spec page 076


//typedef struct packed {
//  bit [1:1] VS; // Vendor Specific 
//  bit [0:0] WRRUPC; // Weighted Round Robin with Urgent Priority Class 
//} S_CAP_SUB_TBL0; //nvme spec page 077


//typedef struct packed {
//  bit [31:16] MJR; // Major Version 
//  bit [15:08] MNR; // Minor Version 
//  bit [07:00] TER; // Tertiary Version 
//} S_CAP_SUB_TBL1; //nvme spec page 077


typedef struct packed {
  bit [31:16] MJR; // Major Version 
  bit [15:08] MNR; // Minor Version 
  bit [07:00] TER; // Tertiary Version 
} S_SPECIFICATION_VERSION_DESCRIPTOR; //nvme spec page 077


typedef struct packed {
  bit [31:00] IVMC; // Interrupt Vector Mask Clear 
} S_INTMC; //nvme spec page 078


typedef struct packed {
  bit [31:00] IVMS; // Interrupt Vector Mask Set 
} S_INTMS; //nvme spec page 078


//typedef struct packed {
//  bit [31:00] IVMC; // Interrupt Vector Mask Clear 
//} S_INTMS_SUB_TBL0; //nvme spec page 078


//typedef struct packed {
//  bit [31:00] IVMS; // Interrupt Vector Mask Set 
//} S_NVM_EXPRESS_BASE_SPECIFICATION_VERSION_PROPERTY__SUB_TBL0_SUB_TBL0; //nvme spec page 078


//typedef struct packed {
//  bit [31:00] IVMC; // Interrupt Vector Mask Clear 
//} S_NVM_EXPRESS_BASE_SPECIFICATION_VERSION_PROPERTY__SUB_TBL1_SUB_TBL1; //nvme spec page 078


typedef struct packed {
  bit [00:00] EN; // Enable 
} S_CC; //nvme spec page 082


//typedef struct packed {
//  bit [31:07] RSVD0; //
//  bit [06:06] ST; // Shutdown Type 
//} S_CC_SUB_TBL0; //nvme spec page 082


typedef struct packed {
  bit [01:01] CFS; // Controller Fatal Status 
  bit [00:00] RDY; // Ready 
} S_CSTS; //nvme spec page 084


typedef struct packed {
  bit [31:28] RSVD0; //
  bit [27:16] ACQS; // Admin Completion Queue Size 
  bit [15:12] RSVD1; //
  bit [11:00] ASQS; // Admin Submission Queue Size 
} S_AQA; //nvme spec page 085


//typedef struct packed {
//  bit [63:12] ASQB; // Admin Submission Queue Base 
//} S_AQA_SUB_TBL0; //nvme spec page 085


typedef struct packed {
  bit [31:00] NSSRC; // NVM Subsystem Reset Control 
} S_NSSR; //nvme spec page 085


//typedef struct packed {
//  bit [31:28] RSVD0; //
//  bit [27:16] ACQS; // Admin Completion Queue Size 
//  bit [15:12] RSVD1; //
//  bit [11:00] ASQS; // Admin Submission Queue Size 
//} S_NSSR_SUB_TBL0; //nvme spec page 085


//typedef struct packed {
//  bit [63:12] ASQB; // Admin Submission Queue Base 
//} S_NSSR_SUB_TBL1; //nvme spec page 085


typedef struct packed {
  bit [63:12] ACQB; // Admin Completion Queue Base 
  bit [11:00] RSVD0; //
} S_ACQ; //nvme spec page 086


//typedef struct packed {
//  bit [31:12] OFST; // Offset 
//  bit [11:09] RSVD0; //
//  bit [08:08] CQDA; // CMB Queue Dword Alignment 
//  bit [07:07] CDMMMS; // CMB Data Metadata Mixed Memory Support 
//  bit [06:06] CDPCILS; // CMB Data Pointer and Command Independent Locations Support 
//  bit [05:05] CDPMLS; // CMB Data Pointer Mixed Locations Support 
//} S_ACQ_SUB_TBL0; //nvme spec page 086


typedef struct packed {
  bit [11:00] RSVD0; //
} S_ASQ; //nvme spec page 086


//typedef struct packed {
//  bit [63:12] ACQB; // Admin Completion Queue Base 
//  bit [11:00] RSVD0; //
//} S_ASQ_SUB_TBL0; //nvme spec page 086


//typedef struct packed {
//  bit [31:12] OFST; // Offset 
//  bit [11:09] RSVD0; //
//  bit [08:08] CQDA; // CMB Queue Dword Alignment 
//  bit [07:07] CDMMMS; // CMB Data Metadata Mixed Memory Support 
//  bit [06:06] CDPCILS; // CMB Data Pointer and Command Independent Locations Support 
//  bit [05:05] CDPMLS; // CMB Data Pointer Mixed Locations Support 
//} S_ASQ_SUB_TBL1; //nvme spec page 086


typedef struct packed {
  bit [04:04] CQPDS; // CMB Queue Physically Discontiguous Support 
  bit [03:03] CQMMS; // CMB Queue Mixed Memory Support 
  bit [02:00] BIR; // Base Indicator Register 
} S_CMBLOC; //nvme spec page 087


//typedef struct packed {
//  bit [31:12] SZ; // Size 
//  bit [11:08] SZU; // Size Units 
//  bit [07:05] RSVD0; //
//  bit [04:04] WDS; // Write Data Support 
//  bit [03:03] RDS; // Read Data Support 
//  bit [02:02] LISTS; // PRP SGL List Support 
//  bit [01:01] CQS; // Completion Queue Support 
//} S_CMBLOC_SUB_TBL0; //nvme spec page 087


typedef struct packed {
  bit [31:31] ABPID; // Active Boot Partition ID 
  bit [30:26] RSVD0; //
  bit [25:24] BRS; // Boot Read Status 
  bit [23:15] RSVD1; //
  bit [14:00] BPSZ; // Boot Partition Size 
} S_BPINFO; //nvme spec page 088


//typedef struct packed {
//  bit [31:31] BPID; // Boot Partition Identifier 
//  bit [30:30] RSVD0; //
//  bit [29:10] BPROF; // Boot Partition Read Offset 
//  bit [09:00] BPRSZ; // Boot Partition Read Size 
//} S_BPINFO_SUB_TBL1; //nvme spec page 088


typedef struct packed {
  bit [31:31] BPID; // Boot Partition Identifier 
  bit [30:30] RSVD0; //
  bit [29:10] BPROF; // Boot Partition Read Offset 
  bit [09:00] BPRSZ; // Boot Partition Read Size 
} S_BPRSEL; //nvme spec page 088


typedef struct packed {
  bit [00:00] SQS; // Submission Queue Support 
} S_CMBSZ; //nvme spec page 088


//typedef struct packed {
//  bit [31:31] ABPID; // Active Boot Partition ID 
//  bit [30:26] RSVD0; //
//  bit [25:24] BRS; // Boot Read Status 
//  bit [23:15] RSVD1; //
//  bit [14:00] BPSZ; // Boot Partition Size 
//} S_CMBSZ_SUB_TBL0; //nvme spec page 088


//typedef struct packed {
//  bit [31:31] BPID; // Boot Partition Identifier 
//  bit [30:30] RSVD0; //
//  bit [29:10] BPROF; // Boot Partition Read Offset 
//  bit [09:00] BPRSZ; // Boot Partition Read Size 
//} S_CMBSZ_SUB_TBL2; //nvme spec page 088


typedef struct packed {
  bit [63:12] BMBBA; // Boot Partition Memory Buffer Base Address 
  bit [11:00] RSVD0; //
} S_BPMBL; //nvme spec page 089


//typedef struct packed {
//  bit [63:12] CBA; // Controller Base Address 
//  bit [11:02] RSVD0; //
//  bit [01:01] CMSE; // Controller Memory Space Enable 
//  bit [00:00] CRE; // Capabilities Registers Enabled 
//} S_BPMBL_SUB_TBL0; //nvme spec page 089


typedef struct packed {
  bit [63:12] CBA; // Controller Base Address 
  bit [11:02] RSVD0; //
  bit [01:01] CMSE; // Controller Memory Space Enable 
  bit [00:00] CRE; // Capabilities Registers Enabled 
} S_CMBMSC; //nvme spec page 089


typedef struct packed {
  bit [31:8] CMBWBZ; // CMB Elasticity Buffer Size Base 
  bit [7:5] RSVD0; //
  bit [4:4] CMBRBB; // CMB Read Bypass Behavior 
  bit [3:0] CMBSZU; // CMB Elasticity Buffer Size Units 
} S_CMBEBS; //nvme spec page 090


//typedef struct packed {
//  bit [31:8] CMBSWTV; // CMB Sustained Write Throughput 
//} S_CMBEBS_SUB_TBL2; //nvme spec page 090


typedef struct packed {
  bit [31:01] RSVD0; //
  bit [00:00] CBAI; // Controller Base Address Invalid 
} S_CMBSTS; //nvme spec page 090


//typedef struct packed {
//  bit [31:8] CMBWBZ; // CMB Elasticity Buffer Size Base 
//  bit [7:5] RSVD0; //
//  bit [4:4] CMBRBB; // CMB Read Bypass Behavior 
//  bit [3:0] CMBSZU; // CMB Elasticity Buffer Size Units 
//} S_CMBSTS_SUB_TBL0; //nvme spec page 090


//typedef struct packed {
//  bit [31:8] CMBSWTV; // CMB Sustained Write Throughput 
//} S_CMBSTS_SUB_TBL3; //nvme spec page 090


typedef struct packed {
  bit [31:8] CMBSWTV; // CMB Sustained Write Throughput 
} S_CMBSWTP; //nvme spec page 090


typedef struct packed {
  bit [31:00] NSSC; // NVM Subsystem Shutdown Control 
} S_NSSD; //nvme spec page 091


typedef struct packed {
  bit [31:16] CRIMT; // Controller Ready Independent of Media Timeout 
  bit [15:0] CRWMT; // Controller Ready With Media Timeout 
} S_CRTO; //nvme spec page 092


//typedef struct packed {
//  bit [31:25] RSVD0; //
//  bit [24:24] CMSS; // Controller Memory Space Supported 
//  bit [23:16] PMRTO; // Persistent Memory Region Timeout 
//  bit [15:14] RSVD1; //
//} S_CRTO_SUB_TBL0; //nvme spec page 092


typedef struct packed {
  bit [13:10] PMRWBM; // Persistent Memory Region Write Barrier Mechanisms 
  bit [9:8] PMRTU; // Persistent Memory Region Time Units 
  bit [7:5] BIR; // Base Indicator Register 
  bit [4:4] WDS; // Write Data Support 
  bit [3:3] RDS; // Read Data Support 
  bit [2:0] RSVD0; //
} S_PMRCAP; //nvme spec page 093


//typedef struct packed {
//  bit [3:2] RSVD0; //
//  bit [1:1] CPMTSTSR; // Completion of PMRSTS Read 
//  bit [0:0] CMR; // Completion of Memory Read 
//} S_PMRCAP_SUB_TBL0; //nvme spec page 093


//typedef struct packed {
//  bit [31:1] RSVD0; //
//  bit [0:0] EN; // Enable 
//} S_PMRCAP_SUB_TBL2; //nvme spec page 093


typedef struct packed {
  bit [31:1] RSVD0; //
  bit [0:0] EN; // Enable 
} S_PMRCTL; //nvme spec page 093


typedef struct packed {
  bit [31:13] RSVD0; //
  bit [12:12] CBAI; // Controller Base Address Invalid 
  bit [11:9] HSTS; // Health Status 
  bit [8:8] NRDY; // Not Ready 
  bit [7:0] ERR; // Error 
} S_PMRSTS; //nvme spec page 094


typedef struct packed {
  bit [31:8] PMRWBZ; // PMR Elasticity Buffer Size Base 
  bit [7:5] RSVD0; //
  bit [4:4] PMRRBB; // PMR Read Bypass Behavior 
  bit [3:0] PMRSZU; // PMR Elasticity Buffer Size Units 
} S_PMREBS; //nvme spec page 095


//typedef struct packed {
//  bit [31:8] PMRSWTV; // PMR Sustained Write Throughput 
//  bit [7:4] RSVD0; //
//  bit [3:0] PMRSWTU; // PMR Sustained Write Throughput Units 
//} S_PMREBS_SUB_TBL1; //nvme spec page 095


typedef struct packed {
  bit [31:8] PMRSWTV; // PMR Sustained Write Throughput 
  bit [7:4] RSVD0; //
  bit [3:0] PMRSWTU; // PMR Sustained Write Throughput Units 
} S_PMRSWTP; //nvme spec page 095


typedef struct packed {
  bit [31:12] CBA; // Controller Base Address 
  bit [11:02] RSVD0; //
  bit [01:01] CMSE; // Controller Memory Space Enable 
  bit [00:00] RSVD1; //
} S_PMRMSCL; //nvme spec page 096


//typedef struct packed {
//  bit [31:00] CBA; // Controller Base Address 
//} S_PMRMSCL_SUB_TBL0; //nvme spec page 096


typedef struct packed {
  bit [31:00] CBA; // Controller Base Address 
} S_PMRMSCU; //nvme spec page 096


typedef struct packed {
  bit [07:00] OPC; // Opcode 
} S_COMMAND_DWORD_0; //nvme spec page 156


//typedef struct packed {
//  bit [07:02] FN; // Function 
//  bit [01:00] DTD; // Data Transfer Direction 
//} S_COMMAND_DWORD_0__SUB_TBL0_SUB_TBL0; //nvme spec page 156


//typedef struct packed {
//  bit [7:2] RSVD0; //
//  bit [1:1] PLSFQ; // PLS Forced Quiescence 
//  bit [0:0] PLSEPF; // PLS Emergency Power Fail 
//} S_IDENTIFY_SUB_TBL3; //nvme spec page 327


//typedef struct packed {
//  bit [7:1] RSVD0; //
//  bit [0:0] SNVSCF; // Same NVM Vendor Specific Command Format 
//} S_IDENTIFY_SUB_TBL2; //nvme spec page 344


//typedef struct packed {
//  bit [255:220] RSVD0; //
//  bit [219:216] EPFVTS; // Emergency Power Fail Vault Time Scale 
//  bit [215:212] FQVTS; // Forced Quiescence Vault Time Scale 
//} S_IDENTIFY_SUB_TBL1; //nvme spec page 350


typedef struct packed {
  bit [255:220] RSVD0; //
  bit [219:216] EPFVTS; // Emergency Power Fail Vault Time Scale 
  bit [215:212] FQVTS; // Forced Quiescence Vault Time Scale 
} S_IDENTIFY; //nvme spec page 350


